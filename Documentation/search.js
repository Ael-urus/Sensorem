window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "info", "modulename": "info", "kind": "module", "doc": "<ul>\n<li>Sensorem - info.py module documentation</li>\n</ul>\n\n<p>This module contains information about the software version,\nrelease notes and module descriptions.</p>\n\n<p>project_name = \u201cSensorem\"\ndescription_projet = \u201cThis project analyzes sensor signals to make a connection with a reference sensor. Provides a report on calibration processing\u201d.\nauthors = [Aelurus]\ncontributor = [Bruno]\ndate_creation = \u201c2024-06-14\u201d</p>\n\n<p>date = \u201c30/03/2025\nversion = \u201c0.4.3.9\u201d</p>\n\n<p>version_notes__ =</p>\n\n<p>Several modifications:</p>\n\n<ul>\n<li>Addition of a database and its management with insertion of sensors for PDF generation (02/02/2025)</li>\n<li>Addition of regression processing with a conversion coefficient (19/01/2025)</li>\n<li>Upgrade of PDF generation: Adaptation of functions to the new GUI (28/12/2024).</li>\n<li>General GUI redesign: Functional implementation (12/25/2024).</li>\n<li>Management of sensor names and positions from GUI: functional implementation (09/12/2024).</li>\n<li>Venturi detection threshold correction: Threshold adjustment (06/12/2024).</li>\n<li>Bug fixes: Various unspecified bug fixes.</li>\n<li>Data clean-up: Removal of \u201c#N/A\u201d and \u201cCalibration\u201d strings when retrieving data (18/02).</li>\n<li>Graph enhancement: Added legends to graphs in the graphical interface (02/18).</li>\n<li>Display of raw data: Display of sensor values in the \u201cHere's the data found\u201d window (02/18).</li>\n<li>Moving average: Addition of a moving average with a step of 2 before the detection of levels. An option to manipulate this parameter in the GUI is planned (03/24/2024).</li>\n</ul>\n\n<p>Bugs corrected and remaining: Some are done, I need to update and check this part</p>\n\n<ul>\n<li>Bearing detection: Increase in the number of points for bearing detection (from 10 to 13) to resolve problems encountered on some runs (18/02).</li>\n<li>Offset in value tables: Correction of an offset in the filling of value tables (average and deviation) in the case of processing with several sensors, caused by different values in the bearings (02/15).</li>\n<li>Color inversion in PDF legend: Correction of color inversion in PDF report measurement legend (02/18).</li>\n<li>Single sensor display: Fixed bug that displayed only one sensor in the \u201cHere are the data found\u201d window (02/25).</li>\n<li>Clean-up of #DIV/! errors: Added clean-up for #DIV/! values (02/25).</li>\n<li>Loss of selected file: Persistent bug: When validating the username, the selected file is lost and the first file in the list is processed instead.</li>\n</ul>\n\n<p>__modules_description__ =</p>\n\n<p>Summary of current modules and their roles:</p>\n\n<ul>\n<li><code>main.py</code> : Application entry point. Launches the graphical interface.</li>\n<li>gui_V3.py` : Manages the GUI, user interaction, graphics display and calls to other modules.</li>\n<li>FunctionsCSV.py`: Manages reading and processing of CSV files.</li>\n<li>SignalFunctions.py`: Contains signal processing functions (filtering, step detection, etc.).</li>\n<li>FunctionPdf.py`: Generates PDF reports.</li>\n<li>FunctionsGui_V3.py`: Provides utility functions for the graphical interface (log management, etc.).</li>\n<li>FunctionsBD.py`: Manages the Database window and all database functions.</li>\n</ul>\n\n<p>An idea for refactoring:</p>\n\n<p>Sensorem/\n\u2502\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 data/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 csv_handler.py     (Refactoring of FunctionsCSV.py)\n\u2502   \u2502   \u2514\u2500\u2500 database_manager.py (Refactoring of FunctionsDB.py)\n\u2502   \u251c\u2500\u2500 processing/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 signal_processor.py (Refactoring of FunctionsSignal.py)\n\u2502   \u251c\u2500\u2500 gui/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 main_window.py      (Refactoring of gui_V3.py)\n\u2502   \u2502   \u2514\u2500\u2500 utils.py            (Part of FunctionsGui_V3.py)\n\u2502   \u251c\u2500\u2500 reporting/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 pdf_generator.py    (Refactoring of FunctionsPdf.py)\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 logger.py           (art of FunctionsGui_V3.py, log management)\n\u2502   \u2514\u2500\u2500 tests/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 test_csv_handler.py\n\u2502       \u251c\u2500\u2500 test_database_manager.py\n\u2502       \u251c\u2500\u2500 test_signal_processor.py\n\u2502       \u2514\u2500\u2500 test_pdf_generator.py</p>\n"}, {"fullname": "main", "modulename": "main", "kind": "module", "doc": "<p>Point d'entr\u00e9e de l'application Sensorem.</p>\n\n<p>Ce script lance l'interface graphique principale de l'application\nSensorem. Il importe les fonctions n\u00e9cessaires depuis les modules\n<code>gui_V3</code> et <code>FonctionsSignal</code>.</p>\n\n<p>Attributs :\n    title (str) : Titre de la fen\u00eatre principale de l'interface graphique.\n    width (int) : Largeur de la fen\u00eatre principale.\n    height (int) : Hauteur de la fen\u00eatre principale.</p>\n"}, {"fullname": "main.main", "modulename": "main", "qualname": "main", "kind": "function", "doc": "<p>Lance l'interface graphique principale de l'application Sensorem.</p>\n\n<p>Cette fonction configure le titre, la largeur et la hauteur de la fen\u00eatre\nprincipale de l'interface graphique. Elle utilise les valeurs suivantes :</p>\n\n<ul>\n<li><code>APP_TITLE</code> (str) : Le titre de la fen\u00eatre (incluant le num\u00e9ro de version).</li>\n<li><code>APP_WIDTH</code> (int) : La largeur de la fen\u00eatre en pixels.</li>\n<li><code>APP_HEIGHT</code> (int) : La hauteur de la fen\u00eatre en pixels.</li>\n</ul>\n\n<p>Ces valeurs sont actuellement d\u00e9finies directement dans la fonction, mais\nil est pr\u00e9vu de les externaliser sous forme de constantes globales pour\nfaciliter leur modification et leur r\u00e9utilisation.</p>\n\n<p>La fonction lance ensuite l'interface en appelant la fonction <code>mainGui</code>\ndu module <code>gui_V3</code> avec les param\u00e8tres configur\u00e9s.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal", "modulename": "FonctionsSignal", "kind": "module", "doc": "<p>Fonctions de traitement du signal.</p>\n\n<p>Created on Wed Apr 15 11:10:34 2020\n@author: Aelurus\n@contributor: Bruno</p>\n"}, {"fullname": "FonctionsSignal.version", "modulename": "FonctionsSignal", "qualname": "version", "kind": "function", "doc": "<p>Retourne le num\u00e9ro de version actuel de l'application.</p>\n\n<p>Cette fonction retourne une cha\u00eene de caract\u00e8res repr\u00e9sentant le num\u00e9ro de version actuel de l'application.\nLe num\u00e9ro de version est au format \"x.x.x.x\" o\u00f9 chaque \"x\" repr\u00e9sente un num\u00e9ro de version.</p>\n\n<p>Args:\n    --\n    Aucun argument n'est requis pour cette fonction.</p>\n\n<p>Returns:\n    str: Le num\u00e9ro de version actuel de l'application (e.g. \"0.4.3.8 B\u00eata\")</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>version()\n          '0.4.3.8 B\u00eata'</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.pas_moyenne_mobile", "modulename": "FonctionsSignal", "qualname": "pas_moyenne_mobile", "kind": "function", "doc": "<p>Retourne le nombre de pas utilis\u00e9s pour calculer la moyenne mobile.</p>\n\n<p>Cette fonction retourne un entier repr\u00e9sentant le nombre de pas utilis\u00e9s pour calculer la moyenne mobile.\nLa moyenne mobile est une technique de calcul qui consiste \u00e0 prendre en compte un certain nombre de valeurs pr\u00e9c\u00e9dentes\npour calculer la moyenne actuelle.</p>\n\n<p>Args:\n    --\n    Aucun argument n'est requis pour cette fonction.</p>\n\n<p>Returns:\n    int: Le nombre de pas utilis\u00e9s pour calculer la moyenne mobile.</p>\n\n<p>Raises:\n    --\n    Aucune exception n'est lev\u00e9e par cette fonction.</p>\n\n<p>Examples:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>pas_moyenne_mobile()\n          2</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<p>Notes:\n    L'option de configuration pour d\u00e9finir le nombre de pas utilis\u00e9es pour la moyenne mobile sera impl\u00e9ment\u00e9e ult\u00e9rieurement.\n    Dans cet instant, elle est simplement fix\u00e9e \u00e0 2 pour les tests.\n    La valeur de 2 signifie que la moyenne mobile sera calcul\u00e9e en prenant en compte les 2 valeurs pr\u00e9c\u00e9dentes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.prep_donnees_graph", "modulename": "FonctionsSignal", "qualname": "prep_donnees_graph", "kind": "function", "doc": "<p>Pr\u00e9pare les donn\u00e9es pour le graphique en les convertissant en une liste d'\u00e9l\u00e9ments incr\u00e9ment\u00e9e.</p>\n\n<p>Cette fonction prend en entr\u00e9e une liste de donn\u00e9es et retourne une liste de listes,\no\u00f9 chaque liste contient l'indice de la donn\u00e9e et la valeur de la donn\u00e9e.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>donnees : List[float]\n    Liste de donn\u00e9es \u00e0 traiter, contenant les valeurs \u00e0 incr\u00e9menter.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>List[List[int, float]]\n    Liste d'\u00e9l\u00e9ments incr\u00e9ment\u00e9e, o\u00f9 chaque \u00e9l\u00e9ment est une liste [indice, valeur].</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prep_donnees_graph</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"go\">[[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]</span>\n</code></pre>\n</div>\n\n<h2 id=\"notes\">Notes:</h2>\n\n<p>Cette fonction utilise la fonction <code>enumerate</code> pour obtenir l'indice et la valeur de chaque \u00e9l\u00e9ment de la liste.\nLa fonction <code>enumerate</code> retourne un objet <code>enumerate</code> qui produit des tuples contenant l'indice et la valeur de chaque \u00e9l\u00e9ment.\nLa liste en compr\u00e9hension est utilis\u00e9e pour convertir l'objet <code>enumerate</code> en une liste de listes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">donnees</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.gen_nom_paliers", "modulename": "FonctionsSignal", "qualname": "gen_nom_paliers", "kind": "function", "doc": "<p>G\u00e9n\u00e8re une s\u00e9quence incr\u00e9ment\u00e9e ascendante et descendante ax\u00e9e sur le milieu du nombre pass\u00e9 en argument.</p>\n\n<p>Cette fonction prend en entr\u00e9e un nombre entier <code>n</code> qui d\u00e9finit la longueur de la s\u00e9quence \u00e0 g\u00e9n\u00e9rer.\nLa s\u00e9quence est compos\u00e9e de deux parties : une partie ascendante qui va de 0 \u00e0 <code>n/2</code> et une partie descendante qui va de <code>n/2 - 1</code> \u00e0 0.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>n (int): Nombre de paliers \u00e0 g\u00e9n\u00e9rer, qui d\u00e9finit la longueur de la s\u00e9quence.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Tuple[int,...]: S\u00e9quence incr\u00e9ment\u00e9e ascendante et descendante.</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gen_nom_paliers</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">))</span>\n<span class=\"go\">(0, 1, 2, 3, 4, 3, 2, 1, 0)</span>\n</code></pre>\n</div>\n\n<h2 id=\"notes\">Notes:</h2>\n\n<p>La fonction utilise la fonction <code>range</code> pour g\u00e9n\u00e9rer les parties ascendante et descendante de la s\u00e9quence.\nLa partie ascendante est g\u00e9n\u00e9r\u00e9e avec <code>range(moitie + 1)</code> qui va de 0 \u00e0 <code>n/2</code>.\nLa partie descendante est g\u00e9n\u00e9r\u00e9e avec <code>range(moitie - 1, -1, -1)</code> qui va de <code>n/2 - 1</code> \u00e0 0.\nLes deux parties sont ensuite concat\u00e9n\u00e9es pour former la s\u00e9quence compl\u00e8te.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.paliers_mark", "modulename": "FonctionsSignal", "qualname": "paliers_mark", "kind": "function", "doc": "<p>D\u00e9finit la valeur pour marquer la s\u00e9paration des paliers.</p>\n\n<p>Cette fonction retourne une valeur flottante qui repr\u00e9sente la s\u00e9paration entre les paliers.\nCette valeur est utilis\u00e9e pour distinguer visuellement les diff\u00e9rents paliers.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>float\n    Valeur de s\u00e9paration des paliers (-0.03).</p>\n\n<h2 id=\"notes\">Notes:</h2>\n\n<p>La valeur de s\u00e9paration est actuellement fix\u00e9e \u00e0 -0.03.\nCette valeur peut \u00eatre ajust\u00e9e pour modifier l'apparence des paliers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.traitement_signal", "modulename": "FonctionsSignal", "qualname": "traitement_signal", "kind": "function", "doc": "<p>Traite et analyse les donn\u00e9es du capteur pour identifier les paliers.</p>\n\n<p>Cette fonction prend en entr\u00e9e les donn\u00e9es brutes du capteur et les valeurs de seuil et de sensibilit\u00e9 pour l'identification des paliers.\nElle retourne une liste de valeurs contenant les informations sur les paliers trouv\u00e9s, les donn\u00e9es brutes du capteur trait\u00e9es, les valeurs de s\u00e9paration des paliers et le nombre de paliers trouv\u00e9s.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>data0 : list\n    Donn\u00e9es brutes du capteur \u00e0 traiter.\nseuil_capt : tuple\n    Valeurs de seuil et de sensibilit\u00e9 pour l'identification des paliers.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>tuple\n    values_sep_paliers : list\n        Liste des valeurs des paliers.\n    data : list\n        Donn\u00e9es brutes du capteur trait\u00e9es.\n    values_sep : list\n        Liste des valeurs de s\u00e9paration des paliers.\n    paliers_find : int\n        Nombre de paliers trouv\u00e9s.\n    paliers_info : list\n        Informations suppl\u00e9mentaires sur les paliers trouv\u00e9s.</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">traitement_signal</span><span class=\"p\">([</span><span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"mf\">0.052</span><span class=\"p\">,</span> <span class=\"mf\">0.014</span><span class=\"p\">))</span>\n<span class=\"go\">([[0.0154, 0.0154, 0.012320000000000001, 0.009240000000000002, 0.0077]], [0.0154, 0.0154, 0.0154, 0.0, 0.0154, 0.0], [0.0154, 0.0154, 0.012320000000000001, 0.009240000000000002, 0.0077], 1, [1, [5], 5, [0.0154, 0.0154, 0.012320000000000001, 0.009240000000000002, 0.0077], [(0, 4)]])</span>\n</code></pre>\n</div>\n\n<h2 id=\"notes\">Notes:</h2>\n\n<p>La fonction utilise plusieurs \u00e9tapes pour traiter les donn\u00e9es du capteur :</p>\n\n<ol>\n<li>\u00c9puration des valeurs non enti\u00e8res des donn\u00e9es brutes du capteur.</li>\n<li>Calcul des valeurs de s\u00e9paration des paliers.</li>\n<li>Recherche des paliers dans les donn\u00e9es.</li>\n<li>Cr\u00e9ation des paliers \u00e0 partir des informations trouv\u00e9es.</li>\n<li>Calcul des valeurs des paliers.</li>\n</ol>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<p>ValueError\n    Si les donn\u00e9es brutes sont invalides ou vides.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data0</span>, </span><span class=\"param\"><span class=\"n\">seuil_capt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.seuil_capteur1", "modulename": "FonctionsSignal", "qualname": "seuil_capteur1", "kind": "function", "doc": "<p>Retourne des valeurs (seuil, sensibilit\u00e9) pour les h\u00e9lices de type 20 et 40 m/s.</p>\n\n<p>Cette fonction retourne un tuple de deux valeurs flottantes qui repr\u00e9sentent le seuil et la sensibilit\u00e9 pour d\u00e9tecter les sauts de palier et filtrer le bruit dans les donn\u00e9es de capteur.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>None\n    Cette fonction ne prend aucun argument.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Tuple[float, float]\n    Un tuple de deux valeurs flottantes : (seuil, sensibilit\u00e9).\n    - seuil (float) : Le coefficient pour d\u00e9tecter les sauts de palier.\n    - sensibilit\u00e9 (float) : Le coefficient pour filtrer le bruit.</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">seuil_capteur1</span><span class=\"p\">()),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">seuil_capteur1</span><span class=\"p\">())</span>\n<span class=\"go\">(&lt;class &#39;tuple&#39;&gt;, 2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seuil_capteur1</span><span class=\"p\">()</span>\n<span class=\"go\">(0.052, 0.014)</span>\n</code></pre>\n</div>\n\n<h2 id=\"notes\">Notes:</h2>\n\n<p>Les valeurs de seuil et de sensibilit\u00e9 sont actuellement fix\u00e9es \u00e0 0.052 et 0.014 respectivement.\nCes valeurs peuvent \u00eatre ajust\u00e9es pour optimiser la d\u00e9tection des sauts de palier et la filtration du bruit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.seuil_capteur2", "modulename": "FonctionsSignal", "qualname": "seuil_capteur2", "kind": "function", "doc": "<p>Retourne les valeurs (seuil, sensibilit\u00e9) pour la MacCaffrey, dans ce cas pr\u00e9cis.</p>\n\n<p>Cette fonction retourne un tuple de deux valeurs flottantes qui repr\u00e9sentent le seuil et la sensibilit\u00e9 pour d\u00e9tecter les sauts de palier et filtrer le bruit dans les donn\u00e9es de capteur de la MacCaffrey.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>None\n    Cette fonction ne prend aucun argument.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Tuple[float, float]\n    Un tuple de deux valeurs flottantes : (seuil, sensibilit\u00e9).\n    - seuil (float) : Le coefficient pour d\u00e9tecter les sauts de palier.\n    - sensibilit\u00e9 (float) : Le coefficient pour filtrer le bruit.</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">seuil_capteur2</span><span class=\"p\">()),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">seuil_capteur2</span><span class=\"p\">())</span>\n<span class=\"go\">(&lt;class &#39;tuple&#39;&gt;, 2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seuil_capteur2</span><span class=\"p\">()</span>\n<span class=\"go\">(0.3, 0.15)</span>\n</code></pre>\n</div>\n\n<h2 id=\"notes\">Notes:</h2>\n\n<p>Les valeurs de seuil et de sensibilit\u00e9 sont actuellement fix\u00e9es \u00e0 0.30 et 0.15 respectivement pour la MacCaffrey.\nCes valeurs peuvent \u00eatre ajust\u00e9es pour optimiser la d\u00e9tection des sauts de palier et la filtration du bruit pour ce type de capteur.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.sep_values", "modulename": "FonctionsSignal", "qualname": "sep_values", "kind": "function", "doc": "<p>S\u00e9pare les valeurs par paliers.</p>\n\n<p>Cette fonction prend en entr\u00e9e une liste de valeurs d'un capteur en d\u00e9cimales et un tuple contenant les valeurs de seuil et de sensibilit\u00e9.\nElle retourne une liste des valeurs des paliers.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>data (List[float])\n    Liste de valeurs d'un capteur en d\u00e9cimales.\nseuil_capt (Tuple[float, float])\n    Tuple contenant les valeurs de seuil et de sensibilit\u00e9.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>List[float]\n    Liste des valeurs des paliers.</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sep_values</span><span class=\"p\">([</span><span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"mf\">0.052</span><span class=\"p\">,</span> <span class=\"mf\">0.014</span><span class=\"p\">))</span>\n<span class=\"go\">[0.0154, 0.0154, 0.012320000000000001, 0.009240000000000002, 0.0077]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">seuil_capt</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.info_values", "modulename": "FonctionsSignal", "qualname": "info_values", "kind": "function", "doc": "<p>R\u00e9cup\u00e8re des informations sur les paliers dans une liste de valeurs num\u00e9riques.</p>\n\n<p>Cette fonction prend en entr\u00e9e une liste de valeurs num\u00e9riques d'un capteur et retourne une liste contenant des informations sur les paliers trouv\u00e9s.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>data (list[float])\n    Liste de valeurs num\u00e9riques d'un capteur.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>list\n    Contient :\n        - Le nombre total de paliers trouv\u00e9s (int).\n        - La liste de la longueur de chaque palier (list[int]).\n        - Le nombre total de valeurs (int).\n        - Une liste avec les valeurs o\u00f9 les paliers sont marqu\u00e9s (list[float]).\n        - Une liste de tuples (d\u00e9but, fin) indiquant la position de chaque palier (list[tuple]).</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">info_values</span><span class=\"p\">([</span><span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"n\">paliers_mark</span><span class=\"p\">(),</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"n\">paliers_mark</span><span class=\"p\">(),</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">])</span>\n<span class=\"go\">[3, [4, 3, 2], 9, [0.0154, 0.0154, 0.0154, -0.03, 0.0154, 0.0154, -0.03, 0.0154, 0.0154], [(0, 2), (4, 5), (7, 8)]]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.make_paliers", "modulename": "FonctionsSignal", "qualname": "make_paliers", "kind": "function", "doc": "<p>Cr\u00e9e une liste avec chaque palier.</p>\n\n<p>Cette fonction prend en entr\u00e9e le nombre de paliers et une liste de la taille de chaque palier.\nElle retourne une liste de paliers, o\u00f9 chaque palier est une liste remplie de z\u00e9ros et la taille de chaque palier est d\u00e9termin\u00e9e par la liste de tailles.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>paliers_find : int\n    Nombre de paliers.\nplage_len_find : list\n    Liste de la taille de chaque palier.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>list\n    Liste de paliers.</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">make_paliers</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"go\">[[0], [0, 0, 0, 0, 0], [0, 0, 0]]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">paliers_find</span>, </span><span class=\"param\"><span class=\"n\">plage_len_find</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.paliers_values_sep", "modulename": "FonctionsSignal", "qualname": "paliers_values_sep", "kind": "function", "doc": "<p>Passe des donn\u00e9es s\u00e9par\u00e9es en liste des tableaux remplis.</p>\n\n<p>Cette fonction prend en entr\u00e9e une liste de valeurs des paliers, le nombre de valeurs et une liste de paliers.\nElle retourne une liste de valeurs des paliers, o\u00f9 chaque palier est un tableau rempli de valeurs.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>values_sep : list\n    Liste des valeurs des paliers.\nnb_values : int\n    Nombre de valeurs.\npaliers : list\n    Liste de paliers.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>list\n    Liste des valeurs des paliers.</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paliers_values_sep</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">paliers_mark</span><span class=\"p\">(),</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"go\">[[1, 2, 3], [4, 5, 6]]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values_sep</span>, </span><span class=\"param\"><span class=\"n\">nb_values</span>, </span><span class=\"param\"><span class=\"n\">paliers</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.insert_nomscapteurs_gui", "modulename": "FonctionsSignal", "qualname": "insert_nomscapteurs_gui", "kind": "function", "doc": "<p>Ins\u00e8re les noms des capteurs dans la liste de valeurs.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>valeurs_brutes : list\n    Liste de valeurs brutes.\nnumero_capteur : int\n    Num\u00e9ro du capteur.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>list\n    Liste de valeurs avec les noms des capteurs ins\u00e9r\u00e9s.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">valeurs_brutes</span>, </span><span class=\"param\"><span class=\"n\">numero_capteur</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.isol_capteurs", "modulename": "FonctionsSignal", "qualname": "isol_capteurs", "kind": "function", "doc": "<p>Is\u00f4le les valeurs des capteurs dans un dictionnaire.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>valeurs : List[Union[str, float]]\n    Liste de valeurs.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>Dict[str, List[float]]\n    Dictionnaire avec les noms des capteurs comme cl\u00e9s et les listes de valeurs comme valeurs.\n    Retourne un dictionnaire vide si la liste en entr\u00e9e est vide.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">valeurs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.traitement_general_donnees", "modulename": "FonctionsSignal", "qualname": "traitement_general_donnees", "kind": "function", "doc": "<p>Traite les donn\u00e9es g\u00e9n\u00e9rales pour les deux capteurs.</p>\n\n<p>Cette fonction prend en entr\u00e9e les nombres de paliers pour les deux capteurs, les listes de valeurs s\u00e9par\u00e9es\npar palier pour les deux capteurs, l'ent\u00eate pour les donn\u00e9es trait\u00e9es, ainsi que les informations et noms\ndes capteurs. Elle retourne la liste des donn\u00e9es trait\u00e9es.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>paliers_find : int\n    Nombre de paliers pour le capteur 1.\npaliers_find2 : int\n    Nombre de paliers pour le capteur 2.\nvalues_sep_paliers : list[list[str]]\n    Liste de valeurs s\u00e9par\u00e9es par palier pour le capteur 1.\nvalues_sep_paliers2 : list[list[str]]\n    Liste de valeurs s\u00e9par\u00e9es par palier pour le capteur 2.\nentete : list[str]\n    Ent\u00eate pour les donn\u00e9es trait\u00e9es.\ncapteur1_info : str, optional\n    Informations pour le capteur 1 (par d\u00e9faut : None).\ncapteur2_info : str, optional\n    Informations pour le capteur 2 (par d\u00e9faut : None).\ncapteur1_name : str, optional\n    Nom du capteur 1 (par d\u00e9faut : \"Capteur 1\").\ncapteur2_name : str, optional\n    Nom du capteur 2 (par d\u00e9faut : \"Capteur 2\").</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>list[list[str]]\n    Liste des donn\u00e9es trait\u00e9es.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">paliers_find</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">paliers_find2</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">values_sep_paliers</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">values_sep_paliers2</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">entete</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">capteur1_info</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">capteur2_info</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">capteur1_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Capteur 1&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">capteur2_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Capteur 2&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.moyenne", "modulename": "FonctionsSignal", "qualname": "moyenne", "kind": "function", "doc": "<p>Renvoie la moyenne des \u00e9l\u00e9ments contenus dans une liste.</p>\n\n<p>Cette fonction prend en entr\u00e9e une liste de nombres (entiers ou flottants) et retourne leur moyenne arithm\u00e9tique.\nSi la liste est vide, elle l\u00e8ve une exception ValueError. Si la liste contient des \u00e9l\u00e9ments non num\u00e9riques,\nelle les ignore et calcule la moyenne des \u00e9l\u00e9ments num\u00e9riques restants.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>liste : list\n    La liste dont on veut calculer la moyenne. Chaque \u00e9l\u00e9ment doit \u00eatre un entier ou un flottant.</p>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<p>ValueError\n    Si la liste est vide.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>float\n    La moyenne arithm\u00e9tique des membres de la liste.</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">moyenne</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">25.80</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.0</span><span class=\"p\">])</span>\n<span class=\"go\">1.5333333333333332</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">liste</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.moyenne_mobile", "modulename": "FonctionsSignal", "qualname": "moyenne_mobile", "kind": "function", "doc": "<p>Calcule la moyenne mobile en encadrant chaque \u00e9l\u00e9ment de la liste avec -pas \u00e0 +pas \u00e0 partir de liste[pas].</p>\n\n<p>Cette fonction prend en entr\u00e9e une liste de nombres flottants et un entier repr\u00e9sentant le nombre d'\u00e9l\u00e9ments\n\u00e0 consid\u00e9rer avant et apr\u00e8s chaque \u00e9l\u00e9ment. Elle retourne une liste des moyennes mobiles pour chaque \u00e9l\u00e9ment\nde la liste en entr\u00e9e.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>liste : List[float]\n    La liste en entr\u00e9e.\npas : int\n    Le nombre d'\u00e9l\u00e9ments \u00e0 consid\u00e9rer avant et apr\u00e8s chaque \u00e9l\u00e9ment.\ndecimales : int, optionnel\n    Nombre de d\u00e9cimales pour arrondir les moyennes mobiles. Si None, aucun arrondi n'est effectu\u00e9.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>List[float]\n    La liste des moyennes mobiles.</p>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<p>ValueError:\n    Si pas est n\u00e9gatif.\nValueError:\n    Si la liste est vide.</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">moyenne</span><span class=\"p\">(</span><span class=\"n\">moyenne_mobile</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mf\">4.20</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">21</span><span class=\"p\">,</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"mi\">23</span><span class=\"p\">,</span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"mi\">25</span><span class=\"p\">,</span><span class=\"mi\">26</span><span class=\"p\">,</span><span class=\"mi\">27</span><span class=\"p\">,</span><span class=\"mi\">28</span><span class=\"p\">,</span><span class=\"mi\">29</span><span class=\"p\">],</span> <span class=\"n\">pas</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">14.900492610837437</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">moyenne</span><span class=\"p\">(</span><span class=\"n\">moyenne_mobile</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mf\">4.20</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">21</span><span class=\"p\">,</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"mi\">23</span><span class=\"p\">,</span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"mi\">25</span><span class=\"p\">,</span><span class=\"mi\">26</span><span class=\"p\">,</span><span class=\"mi\">27</span><span class=\"p\">,</span><span class=\"mi\">28</span><span class=\"p\">,</span><span class=\"mi\">29</span><span class=\"p\">],</span> <span class=\"n\">pas</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"go\">14.75078369905956</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">moyenne</span><span class=\"p\">(</span><span class=\"n\">moyenne_mobile</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mf\">4.20</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">21</span><span class=\"p\">,</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"mi\">23</span><span class=\"p\">,</span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"mi\">25</span><span class=\"p\">,</span><span class=\"mi\">26</span><span class=\"p\">,</span><span class=\"mi\">27</span><span class=\"p\">,</span><span class=\"mi\">28</span><span class=\"p\">,</span><span class=\"mi\">29</span><span class=\"p\">],</span> <span class=\"n\">pas</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"go\">15.006896551724138</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">liste</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">pas</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">decimales</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.verifier_paliers", "modulename": "FonctionsSignal", "qualname": "verifier_paliers", "kind": "function", "doc": "<p>Compare les paliers de deux capteurs et identifie ceux qui posent un probl\u00e8me.\nAffiche le num\u00e9ro du palier, le d\u00e9but et la fin pour chaque capteur.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">paliers_capteur1</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">paliers_capteur2</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">indices_capteur1</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">indices_capteur2</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">nom_capteur1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">nom_capteur2</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.calculate_trend", "modulename": "FonctionsSignal", "qualname": "calculate_trend", "kind": "function", "doc": "<p>Calcule la tendance d'un palier.</p>\n\n<p>Cette fonction prend en entr\u00e9e une liste de valeurs num\u00e9riques et retourne une cha\u00eene de caract\u00e8res\nd\u00e9crivant la tendance du palier ('stable ---', 'croissant ->+', 'd\u00e9croissant +&gt;-') ainsi que la pente\nde la tendance.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>values : list\n    Liste de valeurs num\u00e9riques du palier.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>tuple\n    Un tuple contenant la description de la tendance (str) et la pente de la tendance (float).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.compare_paliers", "modulename": "FonctionsSignal", "qualname": "compare_paliers", "kind": "function", "doc": "<p>Compare les paliers de deux capteurs avec analyse de tendance.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">capteur1_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">capteur2_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">paliers_info1</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">paliers_info2</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>,</span><span class=\"param\">\t<span class=\"n\">values_sep_paliers1</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">values_sep_paliers2</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.setup_log_display", "modulename": "FonctionsSignal", "qualname": "setup_log_display", "kind": "function", "doc": "<p>Configure l'affichage des logs dans le widget texte.</p>\n\n<p>Cette fonction configure les tags de couleur pour les diff\u00e9rents niveaux de logs\n(debug, info, warning, error, critical) dans le widget texte.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>text_widget\n    Le widget texte o\u00f9 les logs seront affich\u00e9s.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text_widget</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsSignal.get_data_with_paliers", "modulename": "FonctionsSignal", "qualname": "get_data_with_paliers", "kind": "function", "doc": "<p>R\u00e9cup\u00e8re les donn\u00e9es brutes et les donn\u00e9es avec d\u00e9tection des paliers.</p>\n\n<p>Cette fonction prend en entr\u00e9e les donn\u00e9es brutes du capteur et les seuils de d\u00e9tection des paliers.\nElle retourne les donn\u00e9es brutes nettoy\u00e9es et les donn\u00e9es avec marqueurs de paliers (0 aux transitions).</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>data : list[float]\n    Donn\u00e9es brutes du capteur.\nseuil_capt : tuple[float, float]\n    Tuple contenant (seuil, sensibilit\u00e9) pour la d\u00e9tection des paliers.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>tuple[list[float], list[float]]\n    - Liste des donn\u00e9es brutes nettoy\u00e9es.\n    - Liste des donn\u00e9es avec marqueurs de paliers (0 aux transitions).</p>\n\n<h2 id=\"example\">Example:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">donnees</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0154</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seuils</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.052</span><span class=\"p\">,</span> <span class=\"mf\">0.014</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">brutes</span><span class=\"p\">,</span> <span class=\"n\">avec_paliers</span> <span class=\"o\">=</span> <span class=\"n\">get_data_with_paliers</span><span class=\"p\">(</span><span class=\"n\">donnees</span><span class=\"p\">,</span> <span class=\"n\">seuils</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">seuil_capt</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsCSV", "modulename": "FonctionsCSV", "kind": "module", "doc": "<p>Created on 10/02/2024\n@author: Aelurus</p>\n"}, {"fullname": "FonctionsCSV.invalide_values", "modulename": "FonctionsCSV", "qualname": "invalide_values", "kind": "function", "doc": "<p>Retourne la liste des valeurs invalides \u00e0 supprimer dans un fichier ou pour le traitement.</p>\n\n<p>Cette fonction retourne une liste de cha\u00eenes de caract\u00e8res qui repr\u00e9sentent des valeurs invalides\nqui peuvent \u00eatre pr\u00e9sentes dans un fichier ou lors du traitement des donn\u00e9es.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>list[str]\n    La liste des valeurs invalides \u00e0 supprimer.</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">invalide_values</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;Invalid&#39;, &#39;#N/A&#39;, &#39;Calibration&#39;, &#39;#DIV/0!&#39;, &#39;#DIV/0!&#39;, &#39;#VALEUR!&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsCSV.read_col_csv", "modulename": "FonctionsCSV", "qualname": "read_col_csv", "kind": "function", "doc": "<p>Lit la colonne sp\u00e9cifi\u00e9e d'un fichier CSV et retourne les valeurs, en supprimant les valeurs invalides.</p>\n\n<p>Cette fonction prend en entr\u00e9e le nom d'un fichier CSV, le s\u00e9parateur des colonnes et le num\u00e9ro de la colonne \u00e0 lire.\nElle retourne une liste de valeurs, o\u00f9 les valeurs non num\u00e9riques sont remplac\u00e9es par des cha\u00eenes de caract\u00e8res et les valeurs vides sont ignor\u00e9es.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>fichier : str\n    Le nom du fichier CSV \u00e0 lire (par exemple \"mon_fichier.csv\")\nsep : str\n    Le s\u00e9parateur des colonnes dans le fichier CSV (par exemple \";\")\ncolNumber : int\n    Le num\u00e9ro de la colonne \u00e0 lire (la premi\u00e8re colonne est \u00e0 l'index 0)</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>List[Union[str, float]]\n    Les valeurs de la colonne du fichier CSV, o\u00f9 les valeurs non num\u00e9riques sont remplac\u00e9es par des cha\u00eenes de caract\u00e8res et les valeurs vides sont ignor\u00e9es.</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">read_col_csv</span><span class=\"p\">(</span><span class=\"s2\">&quot;DebudFindeFichier.csv&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;;&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;V1 (V)&#39;, &#39;Mon Capteur&#39;, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0028, 0.0028, 0.0026, 0.0027, 0.0027, 0.0028, 0.0029, 0.003, 0.0025, 0.0025, 0.0023, 0.0055, 0.0025, 0.0025, 0.0025, 0.00285, 0.00285, 0.00285, 0.00285, 0.00285, 0.00285, 0.00285, 0.00285, 0.00285, 0.0025, 0.00295, 0.0025]</span>\n</code></pre>\n</div>\n\n<h2 id=\"notes\">Notes:</h2>\n\n<p>Cette fonction utilise la biblioth\u00e8que <code>csv</code> pour lire le fichier CSV.\nElle prend en charge les fichiers CSV avec des s\u00e9parateurs de d\u00e9cimales diff\u00e9rents (par exemple \",\" ou \".\").\nLes valeurs non num\u00e9riques sont remplac\u00e9es par des cha\u00eenes de caract\u00e8res.\nLes valeurs vides sont ignor\u00e9es.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fichier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">colNumber</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsCSV.supp_txt", "modulename": "FonctionsCSV", "qualname": "supp_txt", "kind": "function", "doc": "<p>Enl\u00e8ve les noms des capteurs et les valeurs non num\u00e9riques des donn\u00e9es brutes pour \u00e9viter de faire planter le trac\u00e9 'Donn\u00e9es brutes du Gui'.</p>\n\n<p>Cette fonction prend en entr\u00e9e une liste de cha\u00eenes de caract\u00e8res repr\u00e9sentant les donn\u00e9es brutes du capteur,\n et retourne une liste de nombres flottants repr\u00e9sentant les valeurs num\u00e9riques des donn\u00e9es.</p>\n\n<p>Parameters:</p>\n\n<hr />\n\n<pre><code> data0: list[str]\n     Les donn\u00e9es de la mesure du capteur avec des valeurs str et float.\n</code></pre>\n\n<p>Returns:</p>\n\n<hr />\n\n<pre><code> list[float]\n Les donn\u00e9es de la mesure du capteur o\u00f9 toutes les valeurs str et ligne vide sont supprim\u00e9es.\n</code></pre>\n\n<p>Examples:</p>\n\n<hr />\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>supp_txt(['Capteur', '12.3', '15.6', '15.6', '14.2', ''])\n       [12.3, 15.6, 15.6, 14.2]\n      supp_txt(read_col_csv(\"DebudFindeFichier-V1.csv\", \";\", 2))\n      [0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0028, 0.0028, 0.0026, 0.0027, 0.0027, 0.0028, 0.0029, 0.003, 0.0025, 0.0025, 0.0023, 0.0055, 0.0025, 0.0025, 0.0025, 0.00285, 0.00285, 0.00285, 0.00285, 0.00285, 0.00285, 0.00285, 0.00285, 0.00285, 0.0025, 0.00295, 0.0025]</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">supp_txt</span><span class=\"p\">([</span><span class=\"s1\">&#39;12.3a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;15.6&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;-3.14&#39;</span><span class=\"p\">])</span> <span class=\"c1\"># Les cha\u00eenes non num\u00e9riques sont ignor\u00e9es</span>\n<span class=\"go\">[15.6, -3.14]</span>\n</code></pre>\n</div>\n\n<p>Notes:</p>\n\n<hr />\n\n<p>Cette fonction utilise une boucle pour it\u00e9rer sur les \u00e9l\u00e9ments de la liste d'entr\u00e9e.\n Pour chaque \u00e9l\u00e9ment, elle tente de le convertir en nombre flottant en utilisant la fonction float().\n Si la conversion \u00e9choue (par exemple, si l'\u00e9l\u00e9ment est une cha\u00eene de caract\u00e8res non num\u00e9rique),\n la fonction ValueError est lev\u00e9e et l'\u00e9l\u00e9ment est ignor\u00e9.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data0</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsCSV.main", "modulename": "FonctionsCSV", "qualname": "main", "kind": "function", "doc": "<p>Lance l'ex\u00e9cution principale de l'application.</p>\n\n<p>Cette fonction est le point d'entr\u00e9e de l'application et est appel\u00e9e lorsque\nle script est ex\u00e9cut\u00e9 directement (et non import\u00e9 en tant que module).</p>\n\n<p>Elle ex\u00e9cute les tests doctest pour v\u00e9rifier la validit\u00e9 du code.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3", "modulename": "gui_V3", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "gui_V3.valider_trigramme", "modulename": "gui_V3", "qualname": "valider_trigramme", "kind": "function", "doc": "<p>Valide le trigramme saisi par l'utilisateur.</p>\n\n<p>V\u00e9rifie si le trigramme comporte exactement 3 lettres et met \u00e0 jour l'\u00e9tat de validation en cons\u00e9quence.\nSi le trigramme est valide, il est enregistr\u00e9 dans les logs. Si le trigramme est invalide, une erreur est affich\u00e9e \u00e0 l'utilisateur et le champ est r\u00e9initialis\u00e9.\nMet \u00e9galement \u00e0 jour l'\u00e9tat du bouton PDF.</p>\n\n<p>Args:\n    None.</p>\n\n<p>Returns:\n    None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.mettre_a_jour_bouton_pdf", "modulename": "gui_V3", "qualname": "mettre_a_jour_bouton_pdf", "kind": "function", "doc": "<p>Met \u00e0 jour l'\u00e9tat du bouton de g\u00e9n\u00e9ration PDF.</p>\n\n<p>Active le bouton PDF si le trigramme, les capteurs et les unit\u00e9s sont valides, sinon le d\u00e9sactive.</p>\n\n<p>Returns:\n    None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteurFrame", "modulename": "gui_V3", "qualname": "CapteurFrame", "kind": "class", "doc": "<p>Repr\u00e9sente un cadre pour la saisie des informations d'un capteur.</p>\n\n<p>Ce cadre contient des champs pour le nom et la ligne de d\u00e9but du capteur, ainsi qu'un bouton de suppression (sauf pour le premier cadre).</p>\n", "bases": "tkinter.ttk.Frame"}, {"fullname": "gui_V3.CapteurFrame.__init__", "modulename": "gui_V3", "qualname": "CapteurFrame.__init__", "kind": "function", "doc": "<p>Initialise un nouveau cadre CapteurFrame.</p>\n\n<p>Args:\n    master: Le widget parent.\n    is_first: Indique si c'est le premier cadre (et donc sans bouton de suppression).\n    **kwargs: Arguments suppl\u00e9mentaires pass\u00e9s au constructeur de ttk.Frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">ttk</span><span class=\"o\">.</span><span class=\"n\">Frame</span>, </span><span class=\"param\"><span class=\"n\">is_first</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "gui_V3.CapteurFrame.nom_var", "modulename": "gui_V3", "qualname": "CapteurFrame.nom_var", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tkinter.StringVar"}, {"fullname": "gui_V3.CapteurFrame.debut_var", "modulename": "gui_V3", "qualname": "CapteurFrame.debut_var", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tkinter.StringVar"}, {"fullname": "gui_V3.CapteurFrame.is_first", "modulename": "gui_V3", "qualname": "CapteurFrame.is_first", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "gui_V3.CapteurFrame.create_widgets", "modulename": "gui_V3", "qualname": "CapteurFrame.create_widgets", "kind": "function", "doc": "<p>Cr\u00e9e les widgets du cadre.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteurFrame.place_widgets", "modulename": "gui_V3", "qualname": "CapteurFrame.place_widgets", "kind": "function", "doc": "<p>Place les widgets dans la grille.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteurFrame.add_tooltips", "modulename": "gui_V3", "qualname": "CapteurFrame.add_tooltips", "kind": "function", "doc": "<p>Ajoute des infobulles aux champs de saisie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteurFrame.supprimer", "modulename": "gui_V3", "qualname": "CapteurFrame.supprimer", "kind": "function", "doc": "<p>Supprime ce cadre capteur de son parent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteurFrame.get_values", "modulename": "gui_V3", "qualname": "CapteurFrame.get_values", "kind": "function", "doc": "<p>R\u00e9cup\u00e8re les valeurs du nom et de la ligne de d\u00e9but.</p>\n\n<p>Returns:\n    Un tuple contenant le nom et la ligne de d\u00e9but (str, str).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteurFrame.set_values", "modulename": "gui_V3", "qualname": "CapteurFrame.set_values", "kind": "function", "doc": "<p>D\u00e9finit les valeurs du nom et de la ligne de d\u00e9but.</p>\n\n<p>Args:\n    nom: Le nom du capteur.\n    debut: La ligne de d\u00e9but du capteur.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nom</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">debut</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteurFrame.reset", "modulename": "gui_V3", "qualname": "CapteurFrame.reset", "kind": "function", "doc": "<p>R\u00e9initialise les champs nom et d\u00e9but \u00e0 des cha\u00eenes vides.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager", "modulename": "gui_V3", "qualname": "CapteursManager", "kind": "class", "doc": "<p>Ttk Frame widget is a container, used to group other widgets\ntogether.</p>\n", "bases": "tkinter.ttk.Frame"}, {"fullname": "gui_V3.CapteursManager.__init__", "modulename": "gui_V3", "qualname": "CapteursManager.__init__", "kind": "function", "doc": "<p>Construct a Ttk Frame with parent master.</p>\n\n<p>STANDARD OPTIONS</p>\n\n<pre><code>class, cursor, style, takefocus\n</code></pre>\n\n<p>WIDGET-SPECIFIC OPTIONS</p>\n\n<pre><code>borderwidth, relief, padding, width, height\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "gui_V3.CapteursManager.capteurs", "modulename": "gui_V3", "qualname": "CapteursManager.capteurs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gui_V3.CapteursManager.nom_capteur_ref", "modulename": "gui_V3", "qualname": "CapteursManager.nom_capteur_ref", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gui_V3.CapteursManager.unite_capteur_ref", "modulename": "gui_V3", "qualname": "CapteursManager.unite_capteur_ref", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gui_V3.CapteursManager.add_capteur", "modulename": "gui_V3", "qualname": "CapteursManager.add_capteur", "kind": "function", "doc": "<p>Ajout des champs pour un nouveau capteur dans l'interface graphiqye\nArgs:\n    nom:\n    debut:\n    is_first:</p>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nom</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">debut</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">is_first</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.remove_capteur", "modulename": "gui_V3", "qualname": "CapteursManager.remove_capteur", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">capteur</span><span class=\"p\">:</span> <span class=\"n\">gui_V3</span><span class=\"o\">.</span><span class=\"n\">CapteurFrame</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.ajouter_capteurEtPosition_a_list", "modulename": "gui_V3", "qualname": "CapteursManager.ajouter_capteurEtPosition_a_list", "kind": "function", "doc": "<p>Ajoute un capteur avec son nom, sa position dans la liste Y et Y2, et son unit\u00e9.\nSi un capteur avec le m\u00eame nom existe d\u00e9j\u00e0, ajoute un suffixe (a, b, c, ...) pour rendre le nom unique.</p>\n\n<p>Args:\n    nom_capteur (str): Nom de base du capteur.\n    position (int): Position de d\u00e9but dans les listes Y et Y2.\n    unite (str): Unit\u00e9 du capteur.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nom_capteur</span>, </span><span class=\"param\"><span class=\"n\">position</span>, </span><span class=\"param\"><span class=\"n\">unite</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.set_nom_capteur_ref", "modulename": "gui_V3", "qualname": "CapteursManager.set_nom_capteur_ref", "kind": "function", "doc": "<p>D\u00e9finit le nom de r\u00e9f\u00e9rence et l'unit\u00e9 du capteur de r\u00e9f\u00e9rence.</p>\n\n<p>Args:\n    nom_ref (str): Nom du capteur de r\u00e9f\u00e9rence.\n    unite_ref (str): Unit\u00e9 du capteur de r\u00e9f\u00e9rence.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nom_ref</span>, </span><span class=\"param\"><span class=\"n\">unite_ref</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.get_names_position_capteurs", "modulename": "gui_V3", "qualname": "CapteursManager.get_names_position_capteurs", "kind": "function", "doc": "<p>R\u00e9cup\u00e8re le nom et la position de d\u00e9but des capteurs sous forme de liste de tuples.</p>\n\n<p>Returns:\n    List[Tuple[str, int]]: Liste de tuples contenant le nom et la position de chaque capteur.\n                           Ex : [('H1', 24), ('H5', 53), ...]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.get_info_unite", "modulename": "gui_V3", "qualname": "CapteursManager.get_info_unite", "kind": "function", "doc": "<p>Retourne un dictionnaire contenant les noms et unit\u00e9s des capteurs \u00e0 raccorder,\nainsi que le nom et l'unit\u00e9 du capteur de r\u00e9f\u00e9rence.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.get_capteurs_info", "modulename": "gui_V3", "qualname": "CapteursManager.get_capteurs_info", "kind": "function", "doc": "<p>Retourne les informations des capteurs sous forme de liste de tuples (nom, debut).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.update_capteurs_names", "modulename": "gui_V3", "qualname": "CapteursManager.update_capteurs_names", "kind": "function", "doc": "<p>Met \u00e0 jour les listes Y et Y2 avec les noms de capteurs et leurs positions respectives.</p>\n\n<p>Args:\n    Y (list): Liste des valeurs de mesure pour le capteur principal.\n    Y2 (list): Liste des valeurs de mesure pour le capteur de r\u00e9f\u00e9rence.</p>\n\n<p>Returns:\n    tuple: Les listes Y et Y2 mises \u00e0 jour.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">Y2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.est_nom_fichier_valide", "modulename": "gui_V3", "qualname": "CapteursManager.est_nom_fichier_valide", "kind": "function", "doc": "<p>V\u00e9rifie si un nom est valide pour un fichier, en tenant compte des contraintes multi-OS.</p>\n\n<p>Args:\n    nom: Le nom \u00e0 v\u00e9rifier.</p>\n\n<p>Returns:\n    True si le nom est valide, False sinon.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nom</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.valider_capteurs", "modulename": "gui_V3", "qualname": "CapteursManager.valider_capteurs", "kind": "function", "doc": "<p>Valide les informations des capteurs et affiche les r\u00e9sultats.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.reset_capteurs", "modulename": "gui_V3", "qualname": "CapteursManager.reset_capteurs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.afficher_infos", "modulename": "gui_V3", "qualname": "CapteursManager.afficher_infos", "kind": "function", "doc": "<p>Affiche les informations des capteurs dans la zone de texte.</p>\n\n<p>Args:\n    type_affichage (str, optional): Le type d'affichage souhait\u00e9.\n        Peut \u00eatre \"general\" (informations g\u00e9n\u00e9rales et traitement) ou \"traitement\" (uniquement le traitement).\n        Par d\u00e9faut \"general\".</p>\n\n<p>Raises:\n    ValueError: Si le type d'affichage n'est pas reconnu.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">type_affichage</span><span class=\"o\">=</span><span class=\"s1\">&#39;general&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.afficher_traitement_capteurs", "modulename": "gui_V3", "qualname": "CapteursManager.afficher_traitement_capteurs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.CapteursManager.afficher_graphique2", "modulename": "gui_V3", "qualname": "CapteursManager.afficher_graphique2", "kind": "function", "doc": "<p>Affiche le deuxi\u00e8me graphique dans zone_graphique2.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nomFichier</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.on_file_select", "modulename": "gui_V3", "qualname": "on_file_select", "kind": "function", "doc": "<p>G\u00e8re la s\u00e9lection d'un fichier dans la liste.</p>\n\n<p>Affiche les informations du fichier s\u00e9lectionn\u00e9 dans la zone de texte,\nmet \u00e0 jour les graphiques et r\u00e9initialise les capteurs.</p>\n\n<p>Args:\n    event: L'\u00e9v\u00e9nement de s\u00e9lection du fichier.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.on_listbox_lose_focus", "modulename": "gui_V3", "qualname": "on_listbox_lose_focus", "kind": "function", "doc": "<p>G\u00e8re la perte de focus de la liste des fichiers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.afficher_graphique", "modulename": "gui_V3", "qualname": "afficher_graphique", "kind": "function", "doc": "<p>Affiche un graphique dans la zone graphique.</p>\n\n<p>Efface le contenu pr\u00e9c\u00e9dent de la zone graphique, r\u00e9cup\u00e8re les unit\u00e9s et le nom du capteur de r\u00e9f\u00e9rence,\npuis trace le graphique avec les donn\u00e9es fournies.</p>\n\n<p>Args:\n    donnees: Liste de listes de donn\u00e9es \u00e0 tracer.\n    zone_graphique: Zone graphique o\u00f9 tracer le graphique.\n    titre: Titre du graphique.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">donnees</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">zone_graphique</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">ttk</span><span class=\"o\">.</span><span class=\"n\">Frame</span>,</span><span class=\"param\">\t<span class=\"n\">titre</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;un titre&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.afficher_graphique1", "modulename": "gui_V3", "qualname": "afficher_graphique1", "kind": "function", "doc": "<p>Affiche un graphique des donn\u00e9es brutes dans la zone graphique 1.</p>\n\n<p>Cette fonction r\u00e9cup\u00e8re les donn\u00e9es \u00e0 partir d'un fichier sp\u00e9cifi\u00e9, puis les affiche\ndans la zone graphique 1 de l'interface utilisateur en utilisant la fonction\n'afficher_graphique'.</p>\n\n<p>Args:\n    nomFichier: Le nom du fichier contenant les donn\u00e9es \u00e0 afficher.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nomFichier</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.cacher_graphique2", "modulename": "gui_V3", "qualname": "cacher_graphique2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.generer_pdf", "modulename": "gui_V3", "qualname": "generer_pdf", "kind": "function", "doc": "<p>Lance l'ex\u00e9cution de la g\u00e9n\u00e9ration du PDF apr\u00e8s quelques v\u00e9rifications.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.valider_unites", "modulename": "gui_V3", "qualname": "valider_unites", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.valider_coefficients", "modulename": "gui_V3", "qualname": "valider_coefficients", "kind": "function", "doc": "<p>Valide les coefficients de conversion</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.create_tooltip", "modulename": "gui_V3", "qualname": "create_tooltip", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Widget</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.creer_frame_avec_label", "modulename": "gui_V3", "qualname": "creer_frame_avec_label", "kind": "function", "doc": "<p>Cr\u00e9e un frame avec un label.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">label_text</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"s1\">&#39;5&#39;</span>, </span><span class=\"param\"><span class=\"n\">borderwidth</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">relief</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.creer_entry_avec_tooltip", "modulename": "gui_V3", "qualname": "creer_entry_avec_tooltip", "kind": "function", "doc": "<p>Cr\u00e9e un Entry avec un Hovertip.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">tooltip_text</span>, </span><span class=\"param\"><span class=\"n\">default_text</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.configurer_affichage", "modulename": "gui_V3", "qualname": "configurer_affichage", "kind": "function", "doc": "<p>Configure l'affichage principal de l'application.\nArgs:\n    root: La fen\u00eatre principale de l'application</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Tk</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui_V3.mainGui", "modulename": "gui_V3", "qualname": "mainGui", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Version Direct&#39;</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">500</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">400</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3", "modulename": "FonctionsGui_V3", "kind": "module", "doc": "<p>Created on Thus Aug 04  2024</p>\n\n<p>@author: Aelurus</p>\n"}, {"fullname": "FonctionsGui_V3.update_file_list", "modulename": "FonctionsGui_V3", "qualname": "update_file_list", "kind": "function", "doc": "<p>Met \u00e0 jour la liste des fichiers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.dossier_actuel", "modulename": "FonctionsGui_V3", "qualname": "dossier_actuel", "kind": "function", "doc": "<p>Getter/Setter pour le dossier actuel.</p>\n\n<p>Cette fonction permet de r\u00e9cup\u00e9rer ou de d\u00e9finir le dossier actuel.\nSi un nouveau dossier est fourni, il est d\u00e9fini comme le dossier actuel.\nSinon, la fonction retourne le dossier actuel.</p>\n\n<p>Args:\n    new_folder (str, optional): Si fourni, d\u00e9finit le nouveau dossier actuel. Defaults to None.</p>\n\n<p>Returns:\n    str: Le dossier actuel.</p>\n\n<p>Raises:\n    ValueError: Si le nouveau dossier est vide ou None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">new_folder</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.get_state", "modulename": "FonctionsGui_V3", "qualname": "get_state", "kind": "function", "doc": "<p>R\u00e9cup\u00e9rer la valeur d'une variable globale.</p>\n\n<p>Cette fonction permet de r\u00e9cup\u00e9rer la valeur d'une variable globale stock\u00e9e dans le dictionnaire <code>_state</code>.\nLes variables globales sont utilis\u00e9es pour partager des donn\u00e9es entre diff\u00e9rentes parties de l'application.</p>\n\n<p>Args:\n    key (str): La cl\u00e9 de la variable globale. Cette cl\u00e9 doit \u00eatre unique pour \u00e9viter les conflits.</p>\n\n<p>Returns:\n    any: La valeur de la variable globale. Cette valeur peut \u00eatre de n'importe quel type.</p>\n\n<p>Raises:\n    KeyError: Si la cl\u00e9 n'existe pas dans le dictionnaire des variables globales.</p>\n\n<p>Notes:\n    Il est important de noter que les variables globales doivent \u00eatre utilis\u00e9es avec pr\u00e9caution, car elles peuvent cr\u00e9er des d\u00e9pendances entre les diff\u00e9rentes parties de l'application.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.set_state", "modulename": "FonctionsGui_V3", "qualname": "set_state", "kind": "function", "doc": "<p>D\u00e9finir la valeur d'une variable globale.</p>\n\n<p>Cette fonction permet de d\u00e9finir la valeur d'une variable globale stock\u00e9e dans le dictionnaire <code>_state</code>.\nLes variables globales sont utilis\u00e9es pour partager des donn\u00e9es entre diff\u00e9rentes parties de l'application.</p>\n\n<p>Args:\n    key (str): La cl\u00e9 de la variable globale. Cette cl\u00e9 doit \u00eatre unique pour \u00e9viter les conflits.\n    value (any): La nouvelle valeur de la variable globale. Cette valeur peut \u00eatre de n'importe quel type.</p>\n\n<p>Notes:\n    Il est important de noter que les variables globales doivent \u00eatre utilis\u00e9es avec pr\u00e9caution, car elles peuvent cr\u00e9er des d\u00e9pendances entre les diff\u00e9rentes parties de l'application.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.num_colonne_lire", "modulename": "FonctionsGui_V3", "qualname": "num_colonne_lire", "kind": "function", "doc": "<p>R\u00e9cup\u00e8re le num\u00e9ro de colonne pour lire les donn\u00e9es d'un capteur.</p>\n\n<p>Cette fonction retourne le num\u00e9ro de colonne \u00e0 partir duquel les donn\u00e9es d'un capteur sp\u00e9cifique doivent \u00eatre lues.\nLes num\u00e9ros de colonne sont stock\u00e9s dans un dictionnaire qui mappe les noms de capteurs \u00e0 leurs num\u00e9ros de colonne respectifs.</p>\n\n<p>Args:\n    Capteur (str): Le nom du capteur.</p>\n\n<p>Returns:\n    int: Le num\u00e9ro de colonne pour lire les donn\u00e9es du capteur.</p>\n\n<p>Raises:\n    ValueError: Si le capteur n'est pas trouv\u00e9 dans la liste des capteurs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Capteur</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.num_ligne_lire", "modulename": "FonctionsGui_V3", "qualname": "num_ligne_lire", "kind": "function", "doc": "<p>R\u00e9cup\u00e8re le num\u00e9ro de ligne pour lire les donn\u00e9es.</p>\n\n<p>Cette fonction retourne le num\u00e9ro de ligne \u00e0 partir duquel les donn\u00e9es doivent \u00eatre lues.\nLe num\u00e9ro de ligne par d\u00e9faut est de 24.</p>\n\n<p>Args:\n    FirstLigne (int, optional): Le num\u00e9ro de ligne pour lire les donn\u00e9es. Par d\u00e9faut, 24.</p>\n\n<p>Returns:\n    int: Le num\u00e9ro de ligne pour lire les donn\u00e9es.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">FirstLigne</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">24</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.get_data_from_file", "modulename": "FonctionsGui_V3", "qualname": "get_data_from_file", "kind": "function", "doc": "<p>R\u00e9cup\u00e8re les donn\u00e9es \u00e0 partir d'un fichier.</p>\n\n<p>Cette fonction lit les donn\u00e9es \u00e0 partir d'un fichier sp\u00e9cifi\u00e9 et retourne un tuple contenant les donn\u00e9es lues.\nLes donn\u00e9es sont lues \u00e0 partir de deux colonnes sp\u00e9cifiques du fichier, correspondant aux capteurs 1 et 2.</p>\n\n<p>Args:\n    fichier (str): Le chemin du fichier \u00e0 lire.</p>\n\n<p>Returns:\n    tuple: Un tuple contenant les donn\u00e9es lues \u00e0 partir du fichier, sous la forme [y, y2]\n           o\u00f9 y et y2 sont les donn\u00e9es des capteurs 1 et 2, respectivement.\n           Si une erreur se produit lors de l'ouverture du fichier, la fonction retourne None.</p>\n\n<p>Raises:\n    messagebox.showerror: Si une erreur se produit lors de l'ouverture du fichier.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fichier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.normaliser", "modulename": "FonctionsGui_V3", "qualname": "normaliser", "kind": "function", "doc": "<p>Normalise un chemin de fichier pour le rendre compatible avec l'OS utilis\u00e9.</p>\n\n<p>Cette fonction prend en entr\u00e9e un chemin de base et des arguments suppl\u00e9mentaires,\npuis les combine en un chemin complet en utilisant les s\u00e9parateurs de chemins appropri\u00e9s\npour l'OS utilis\u00e9. Elle normalise \u00e9galement le chemin en supprimant les r\u00e9pertoires\nparent (<code>..</code>) et courant (<code>.</code>) inutiles.</p>\n\n<p>Args:\n    chemin (str): Le chemin de base du fichier.\n    *args (str): Les composants suppl\u00e9mentaires du chemin.</p>\n\n<p>Returns:\n    str: Le chemin de fichier normalis\u00e9.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chemin</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.rafraichir_liste_fichiers", "modulename": "FonctionsGui_V3", "qualname": "rafraichir_liste_fichiers", "kind": "function", "doc": "<p>Rafra\u00eechit la liste des fichiers CSV dans le dossier actuel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.initialiser_selection_listbox", "modulename": "FonctionsGui_V3", "qualname": "initialiser_selection_listbox", "kind": "function", "doc": "<p>Initialise une s\u00e9lection par d\u00e9faut dans la <code>Listbox</code> si elle contient des \u00e9l\u00e9ments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.afficher_liste_fichiers", "modulename": "FonctionsGui_V3", "qualname": "afficher_liste_fichiers", "kind": "function", "doc": "<p>Affiche la liste des fichiers CSV dans le dossier sp\u00e9cifi\u00e9.</p>\n\n<p>Cette fonction nettoie la liste des fichiers existante,\npuis ins\u00e8re les noms des fichiers CSV trouv\u00e9s dans le dossier sp\u00e9cifi\u00e9.</p>\n\n<p>Args:\n    dossier (str): Le chemin du dossier o\u00f9 rechercher les fichiers CSV.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dossier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.nom_fichier_selectionne", "modulename": "FonctionsGui_V3", "qualname": "nom_fichier_selectionne", "kind": "function", "doc": "<p>R\u00e9cup\u00e8re le nom du fichier s\u00e9lectionn\u00e9 dans la liste des fichiers.</p>\n\n<p>Cette fonction v\u00e9rifie si un fichier est s\u00e9lectionn\u00e9 dans la liste,\net si oui, elle retourne le nom du fichier s\u00e9lectionn\u00e9.\nSi aucun fichier n'est s\u00e9lectionn\u00e9, elle affiche un message d'avertissement\net retourne None.</p>\n\n<p>Returns:\n    str: Le nom du fichier s\u00e9lectionn\u00e9, ou None si aucun fichier n'est s\u00e9lectionn\u00e9.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.get_liste_fichiers", "modulename": "FonctionsGui_V3", "qualname": "get_liste_fichiers", "kind": "function", "doc": "<p>R\u00e9cup\u00e8re la liste des fichiers stock\u00e9e dans l'\u00e9tat.</p>\n\n<p>Cette fonction r\u00e9cup\u00e8re la liste des fichiers qui est stock\u00e9e dans l'\u00e9tat de l'application.\nLa liste des fichiers est un widget Tkinter de type Listbox qui permet d'afficher et de s\u00e9lectionner des fichiers.</p>\n\n<p>Returns:\n    tk.Listbox: La liste des fichiers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Listbox</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.traitement_fichier", "modulename": "FonctionsGui_V3", "qualname": "traitement_fichier", "kind": "function", "doc": "<p>Lecture et affichage des donn\u00e9es du fichier s\u00e9lectionn\u00e9 sans graphiques.</p>\n\n<p>Cette fonction lit les donn\u00e9es des capteurs dans le fichier s\u00e9lectionn\u00e9,\neffectue un traitement sur ces donn\u00e9es et retourne les r\u00e9sultats sous forme de cha\u00eene de caract\u00e8res.</p>\n\n<p>Args:</p>\n\n<p>Returns:\n    str: Le traitement complet des donn\u00e9es du fichier sous forme de cha\u00eene de caract\u00e8res.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.LogManager", "modulename": "FonctionsGui_V3", "qualname": "LogManager", "kind": "class", "doc": "<p>Gestionnaire de logs am\u00e9lior\u00e9 pour le traitement des signaux.</p>\n"}, {"fullname": "FonctionsGui_V3.LogManager.__init__", "modulename": "FonctionsGui_V3", "qualname": "LogManager.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">zone_texte_info_general</span></span>)</span>"}, {"fullname": "FonctionsGui_V3.LogManager.LEVELS", "modulename": "FonctionsGui_V3", "qualname": "LogManager.LEVELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;DEBUG&#x27;: 0, &#x27;INFO&#x27;: 1, &#x27;WARNING&#x27;: 2, &#x27;ERROR&#x27;: 3, &#x27;CRITICAL&#x27;: 4}"}, {"fullname": "FonctionsGui_V3.LogManager.zone_texte", "modulename": "FonctionsGui_V3", "qualname": "LogManager.zone_texte", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "FonctionsGui_V3.LogManager.messages", "modulename": "FonctionsGui_V3", "qualname": "LogManager.messages", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "FonctionsGui_V3.LogManager.current_context", "modulename": "FonctionsGui_V3", "qualname": "LogManager.current_context", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "FonctionsGui_V3.LogManager.start_context", "modulename": "FonctionsGui_V3", "qualname": "LogManager.start_context", "kind": "function", "doc": "<p>D\u00e9marre un nouveau contexte de logging.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.LogManager.end_context", "modulename": "FonctionsGui_V3", "qualname": "LogManager.end_context", "kind": "function", "doc": "<p>Termine le contexte actuel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.LogManager.debug", "modulename": "FonctionsGui_V3", "qualname": "LogManager.debug", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.LogManager.info", "modulename": "FonctionsGui_V3", "qualname": "LogManager.info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.LogManager.error", "modulename": "FonctionsGui_V3", "qualname": "LogManager.error", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.LogManager.critical", "modulename": "FonctionsGui_V3", "qualname": "LogManager.critical", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.LogManager.get_summary", "modulename": "FonctionsGui_V3", "qualname": "LogManager.get_summary", "kind": "function", "doc": "<p>G\u00e9n\u00e8re un r\u00e9sum\u00e9 des logs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.LogManager.warning", "modulename": "FonctionsGui_V3", "qualname": "LogManager.warning", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.tracer_graphique", "modulename": "FonctionsGui_V3", "qualname": "tracer_graphique", "kind": "function", "doc": "<p>Trace un graphique avec les donn\u00e9es fournies.</p>\n\n<p>Cette fonction permet de tracer un graphique avec les donn\u00e9es fournies, en utilisant les l\u00e9gendes et les options de personnalisation fournies.</p>\n\n<p>Parameters:</p>\n\n<hr />\n\n<p>donnees : list\n     Liste de listes de donn\u00e9es \u00e0 tracer.\n Legende : list\n     Liste de l\u00e9gendes pour les donn\u00e9es.\n titre : str, optional\n     Titre du graphique. Par d\u00e9faut \"\".\n xlabel : str, optional\n     \u00c9tiquette de l'axe x. Par d\u00e9faut \"\".\n ylabels : list, optional\n     Liste d'\u00e9tiquettes pour les axes y. Par d\u00e9faut None.\n styles : list, optional\n     Liste de dictionnaires de style pour chaque ligne. Par d\u00e9faut None.\n marges : dict, optional\n     Dictionnaire de configuration des marges. Par d\u00e9faut None.</p>\n\n<p>Returns:</p>\n\n<hr />\n\n<p>Figure\n     La figure du graphique.</p>\n\n<p>Raises:</p>\n\n<hr />\n\n<p>ValueError\n     Si le nombre de listes de donn\u00e9es et de l\u00e9gendes ne correspond pas.</p>\n\n<p>Example:</p>\n\n<hr />\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>donnees = [np.array([1, 2, 3]), np.array([4, 5, 6])]\n      fig = tracer_graphique(donnees, ['Donn\u00e9e 1', 'Donn\u00e9e 2'],\n      ...                        titre=\"Mon graphique\", xlabel=\"X\", ylabels=[\"Y1\", \"Y2\"],\n      ...                        styles=[{'linestyle': '--'}, {'marker': 'o'}])</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">Figure</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">donnees</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">Legende</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">titre</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ylabels</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">styles</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">marges</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsGui_V3.log_message", "modulename": "FonctionsGui_V3", "qualname": "log_message", "kind": "function", "doc": "<p>Enregistre un message de log dans la zone de texte d\u00e9di\u00e9e.</p>\n\n<p>Cette fonction permet d'enregistrer un message de log dans la zone de texte d\u00e9di\u00e9e, avec un niveau de log sp\u00e9cifique.\nLe niveau de log peut \u00eatre INFO, WARNING, ERROR, etc.</p>\n\n<p>Args:\n    message (str): Le message \u00e0 enregistrer.\n    level (str, optional): Le niveau de log. Par d\u00e9faut \"INFO\".</p>\n\n<p>Raises:\n    ValueError: Si la zone de texte pour les logs n'a pas \u00e9t\u00e9 initialis\u00e9e.</p>\n\n<p>Notes:\n    La zone de texte pour les logs est obtenue \u00e0 l'aide de la fonction get_state.\n    Le message est ins\u00e9r\u00e9 dans la zone de texte avec un tag sp\u00e9cifique pour le niveau de log.\n    La zone de texte est d\u00e9fil\u00e9e jusqu'\u00e0 la fin pour que le message soit visible.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;INFO&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsPdf", "modulename": "FonctionsPdf", "kind": "module", "doc": "<p>Fonctions permettant la production du PDF et sa mise en page.</p>\n\n<p>Created on Thu Jun 11 19:21:41 2020\n@author: Aelurus</p>\n"}, {"fullname": "FonctionsPdf.test_get_info_unite_pdf", "modulename": "FonctionsPdf", "qualname": "test_get_info_unite_pdf", "kind": "function", "doc": "<p>Teste l'int\u00e9gration de get_info_unite dans FonctionsPdf.py en utilisant fg.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsPdf.create_graph", "modulename": "FonctionsPdf", "qualname": "create_graph", "kind": "function", "doc": "<p>Cette fonction cr\u00e9e un graphe \u00e0 l'aide de la biblioth\u00e8que <code>drawing</code>. Elle prend plusieurs param\u00e8tres obligatoires\net facultatifs permettant de configurer son apparence et ses donn\u00e9es.</p>\n\n<p>Parameters:\n    title (str): Titre du graphe.\n    data (list<tuple>): Donn\u00e9es \u00e0 repr\u00e9senter sous forme de liste de couples (x, y).\n    chartcolors (list<str>): Couleurs des lignes du premier jeu de donn\u00e9es. Doit contenir autant d'\u00e9l\u00e9ments\n                            que de s\u00e9ries dans <code>data</code>.\n    x (int): Coordonn\u00e9e abscisse en pixel de l'origine sup\u00e9rieure gauche du graphe par rapport au coin haut gauche\n            de la zone de dessin.\n    y (int): Coordonn\u00e9e ordonne en pixel de l'origine sup\u00e9rieure gauche du graphe par rapport au coin haut gauche\n            de la zone de dessin.\n    w (int): Largeur en pixels du graphe.\n    shiftw (int): D\u00e9callage horizontal appliqu\u00e9 aux donn\u00e9es avant affichage. Utile si l'abscisse z\u00e9ro doit \u00eatre\n                  centr\u00e9 sur le graphe.\n    h (int): Hauteur en pixels du graphe.\n    shifth (int): D\u00e9callage vertical appliqu\u00e9 aux donn\u00e9es avant affichage. Utile si l'ordonn\u00e9 z\u00e9ro doit \u00eatre\n                 centr\u00e9 sur le graphe.\n    xYLabel (int): Abscisse en pixel de l'extr\u00eamit\u00e9 inf\u00e9rieur gauche de l'\u00e9tiquette associ\u00e9e \u00e0 l'axe des ordonn\u00e9es.\n    data2 (list<tuple>, optional): Second ensemble de donn\u00e9es \u00e0 repr\u00e9senter sous forme de liste de couples (x, y).\n                                  Par d\u00e9faut [], pas de seconde s\u00e9rie.\n    chartcolors2 (list<str>, optional): Couleurs des lignes du second jeu de donn\u00e9es. Doit contenir autant\n                                       d'\u00e9l\u00e9ments que de s\u00e9ries dans <code>data2</code>. Par d\u00e9faut [], pas de seconde\n                                       s\u00e9rie.\n    xtitle (str, optional): Texte \u00e0 afficher comme libell\u00e9 de l'axe des abcisses. Par d\u00e9faut 'Temps [s]'.\n    shiftFontXt (int, optional): Valeur num\u00e9rique positive ou n\u00e9gative indiquant la quantit\u00e9 \u00e0 incr\u00e9menter\n                                (positive) ou diminuer (negative) de la taille du texte utilis\u00e9 pour\n                                l'affichage du titre de l'axe des abcisses. Par d\u00e9faut 1.\n    yXt (int, optional): Ordonn\u00e9e en pixel de l'extr\u00eamit\u00e9 inf\u00e9rieur gauche de l'\u00e9tiquette associ\u00e9e \u00e0 l'axe des\n                          ordonn\u00e9es. Par d\u00e9faut -7.\n    xtvisi (int, optional): Choix entre 0 ou 1, indique si l'axe des abcisses doit \u00eatre visible ou non. Par\n                            d\u00e9faut 1.\n    ytitle (str, optional): Texte \u00e0 afficher comme libell\u00e9 de l'axe des ordonn\u00e9es. Par d\u00e9faut 'Tension [V]'.\n    y2title (str, optional): Libell\u00e9 de l'axe des ordonn\u00e9es droit pour la deuxi\u00e8me s\u00e9rie de donn\u00e9es. Par\n                            d\u00e9faut 'Capteur r\u00e9f'.\n    nomCapteur1 (str, optional): Nom du premier capteur. Par d\u00e9faut 'Capteur \u00e0 raccorder (C_r)'.\n    nomCapteur2 (str, optional): Nom du second capteur. Par d\u00e9faut 'Capteur de r\u00e9f\u00e9rence (C_ref)'\n    ForceXzero (int, optional): Indique si l'axe des abscisses doit forcer l'origine \u00e0 zero. Par d\u00e9faut 1.\n    isSecondY (bool, optional): Active/D\u00e9sactive l'affichage de l'axe des ordonn\u00e9es droit. Par d\u00e9faut True.\n    isLegend (bool, optional): Affiche/Masque la l\u00e9gende. Par d\u00e9faut True.</p>\n\n<p>Returns:\n    drawing.Drawing: Objet instanci\u00e9 correspondant au graphe cr\u00e9\u00e9. Peut \u00eatre export\u00e9 vers un fichier image\n                      apr\u00e8s personnalisation compl\u00e9mentaire.\nRaises:\n    NameError: Si les variables <code>color01</code> et <code>color02</code> sont utilis\u00e9es mais n'ont pas \u00e9t\u00e9 correctement\n              d\u00e9finies.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">chartcolors</span>,</span><span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">w</span>,</span><span class=\"param\">\t<span class=\"n\">shiftw</span>,</span><span class=\"param\">\t<span class=\"n\">h</span>,</span><span class=\"param\">\t<span class=\"n\">shifth</span>,</span><span class=\"param\">\t<span class=\"n\">xYLabel</span>,</span><span class=\"param\">\t<span class=\"n\">data2</span><span class=\"o\">=</span><span class=\"p\">[[(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)]]</span>,</span><span class=\"param\">\t<span class=\"n\">chartcolors2</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">xtitle</span><span class=\"o\">=</span><span class=\"s1\">&#39;Temps [s]&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">shiftFontXt</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">yXt</span><span class=\"o\">=-</span><span class=\"mi\">7</span>,</span><span class=\"param\">\t<span class=\"n\">xtvisi</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">ytitle</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Tension [V]&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y2title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Capteur r\u00e9f&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nomCapteur1</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">unite_capteur1</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nomCapteur2</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">unite_capteur2</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ForceXzero</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">isSecondY</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">isLegend</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsPdf.myTable", "modulename": "FonctionsPdf", "qualname": "myTable", "kind": "function", "doc": "<p>Cr\u00e9e un tableau pour un document PDF en utilisant la biblioth\u00e8que ReportLab.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tabledata</strong>:  Liste de listes contenant les donn\u00e9es du tableau.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Objet de tableau pr\u00eat \u00e0 \u00eatre utilis\u00e9 dans un document PDF.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tabledata</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsPdf.prep_donnees1", "modulename": "FonctionsPdf", "qualname": "prep_donnees1", "kind": "function", "doc": "<p>Pr\u00e9pare les donn\u00e9es pour le tableau 1 du PDF en formatant les valeurs des paliers.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>len0 : int\n    Nombre d'\u00e9l\u00e9ments par ligne dans le tableau.\npaliers_find : int\n    Nombre de paliers \u00e0 traiter.\nvalues_sep_paliers : List[List[float]]\n    Liste des valeurs s\u00e9par\u00e9es par palier.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>List[Tuple[int, str, str]]\n    Liste des donn\u00e9es format\u00e9es pour le tableau 1 du PDF.\n    Chaque \u00e9l\u00e9ment de la liste est un tuple contenant :\n    - Le num\u00e9ro du palier\n    - Le coefficient g\u00e9n\u00e9r\u00e9 pour le palier\n    - La longueur arrondie des valeurs du palier</p>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prep_donnees1</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]])</span>\n<span class=\"go\">[(1, &#39;0&#39;, &#39;3&#39;), (2, &#39;1&#39;, &#39;3&#39;), (3, &#39;0&#39;, &#39;3&#39;)]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">len0</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">paliers_find</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">values_sep_paliers</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsPdf.traitement_pdf", "modulename": "FonctionsPdf", "qualname": "traitement_pdf", "kind": "function", "doc": "<p>Pr\u00e9-traitement et mise en forme des donn\u00e9es, puis g\u00e9n\u00e9ration des PDF par couple de capteurs capteur-ref.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rundir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">nom_fichier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">nom_utilisateur</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">colonne1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">colonne2</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">info_unites</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsPdf.convertir_valeurs_reference", "modulename": "FonctionsPdf", "qualname": "convertir_valeurs_reference", "kind": "function", "doc": "<p>Convertit les valeurs du capteur de r\u00e9f\u00e9rence en utilisant les coefficients de conversion.</p>\n\n<p>Args:\n    valeurs: Liste des valeurs brutes du capteur de r\u00e9f\u00e9rence.\n    coef_a: Coefficient de conversion 'a'.\n    coef_b: Coefficient de conversion 'b'.</p>\n\n<p>Returns:\n    Liste des valeurs converties.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">valeurs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">coef_a</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">coef_b</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsPdf.calculer_regression", "modulename": "FonctionsPdf", "qualname": "calculer_regression", "kind": "function", "doc": "<p>Calcule les coefficients de r\u00e9gression lin\u00e9aire entre les valeurs du capteur pass\u00e9 et les valeurs converties du capteur de r\u00e9f\u00e9rence.</p>\n\n<p>Args:\n    valeurs_capteur: Liste des valeurs du capteur pass\u00e9.\n    valeurs_reference_converties: Liste des valeurs converties du capteur de r\u00e9f\u00e9rence.</p>\n\n<p>Returns:\n    Tuple (a_reg, b_reg) : Coefficients de r\u00e9gression lin\u00e9aire.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">valeurs_capteur</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">valeurs_reference_converties</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsPdf.gen_pdf", "modulename": "FonctionsPdf", "qualname": "gen_pdf", "kind": "function", "doc": "<p>G\u00e9n\u00e9ration du PDF final comprenant les donn\u00e9es pr\u00e9-calcul\u00e9es et les graphiques.</p>\n\n<pre><code>Cette fonction g\u00e9n\u00e8re un PDF final contenant toutes les informations et traitements n\u00e9cessaires pour chaque paire\nde capteurs capteur-ref. Elle inclut des graphiques et des tableaux r\u00e9sumant les donn\u00e9es pr\u00e9-calcul\u00e9es et les r\u00e9sultats\ndu traitement.\n</code></pre>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>data1 : list\n    Donn\u00e9es brutes du premier capteur.\nnumcapteur : str\n    Num\u00e9ro du premier capteur.\ndata2 : list\n    Donn\u00e9es brutes du deuxi\u00e8me capteur.\nnumcapteur2 : str\n    Num\u00e9ro du deuxi\u00e8me capteur.\ndatat1 : list\n    Donn\u00e9es format\u00e9es pour le tableau 1.\ndatat2 : list\n    Donn\u00e9es format\u00e9es pour le tableau 2.\nvalues_sep : list\n    Valeurs s\u00e9par\u00e9es des paliers du premier capteur.\nvalues_sep2 : list\n    Valeurs s\u00e9par\u00e9es des paliers du deuxi\u00e8me capteur.\ndata3 : list\n    Donn\u00e9es pour les graphiques par paires de paliers.\nrundir : str\n    R\u00e9pertoire de sortie pour le PDF g\u00e9n\u00e9r\u00e9.\nfichier : str\n    Nom du fichier CSV contenant les donn\u00e9es.\nnom_utilisateur : str\n    Nom de l'utilisateur pour lequel le PDF est g\u00e9n\u00e9r\u00e9.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>None le PDF</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data1</span>,</span><span class=\"param\">\t<span class=\"n\">numcapteur</span>,</span><span class=\"param\">\t<span class=\"n\">data2</span>,</span><span class=\"param\">\t<span class=\"n\">numcapteur2</span>,</span><span class=\"param\">\t<span class=\"n\">datat1</span>,</span><span class=\"param\">\t<span class=\"n\">datat2</span>,</span><span class=\"param\">\t<span class=\"n\">values_sep</span>,</span><span class=\"param\">\t<span class=\"n\">values_sep2</span>,</span><span class=\"param\">\t<span class=\"n\">data3</span>,</span><span class=\"param\">\t<span class=\"n\">rundir</span>,</span><span class=\"param\">\t<span class=\"n\">fichier</span>,</span><span class=\"param\">\t<span class=\"n\">nom_utilisateur</span>,</span><span class=\"param\">\t<span class=\"n\">info_unites</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsPdf.main", "modulename": "FonctionsPdf", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB", "modulename": "FonctionsDB", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "FonctionsDB.DBManager", "modulename": "FonctionsDB", "qualname": "DBManager", "kind": "class", "doc": "<p>Gestionnaire de base de donn\u00e9es pour les capteurs.</p>\n\n<p>Cette classe permet de g\u00e9rer les donn\u00e9es de calibration des capteurs dans une base de donn\u00e9es SQLite.\nElle fournit des m\u00e9thodes pour ajouter, supprimer, r\u00e9cup\u00e9rer et exporter les donn\u00e9es de calibration.</p>\n"}, {"fullname": "FonctionsDB.DBManager.__init__", "modulename": "FonctionsDB", "qualname": "DBManager.__init__", "kind": "function", "doc": "<p>Initialisation du gestionnaire de base de donn\u00e9es.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_path: Chemin de la base de donn\u00e9es SQLite (par d\u00e9faut</strong>:  'capteurs.db').</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;capteurs.db&#39;</span></span>)</span>"}, {"fullname": "FonctionsDB.DBManager.db_path", "modulename": "FonctionsDB", "qualname": "DBManager.db_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "FonctionsDB.DBManager.conn", "modulename": "FonctionsDB", "qualname": "DBManager.conn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "FonctionsDB.DBManager.cursor", "modulename": "FonctionsDB", "qualname": "DBManager.cursor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "FonctionsDB.DBManager.connect", "modulename": "FonctionsDB", "qualname": "DBManager.connect", "kind": "function", "doc": "<p>\u00c9tablit la connexion \u00e0 la base de donn\u00e9es.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True si la connexion r\u00e9ussit, False sinon.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.DBManager.disconnect", "modulename": "FonctionsDB", "qualname": "DBManager.disconnect", "kind": "function", "doc": "<p>Ferme la connexion \u00e0 la base de donn\u00e9es.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.DBManager.execute_query", "modulename": "FonctionsDB", "qualname": "DBManager.execute_query", "kind": "function", "doc": "<p>Ex\u00e9cute une requ\u00eate SQL avec gestion des erreurs et commit.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query</strong>:  La requ\u00eate SQL \u00e0 ex\u00e9cuter.</li>\n<li><strong>params</strong>:  Les param\u00e8tres \u00e0 passer \u00e0 la requ\u00eate (optionnel).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Un tuple contenant un bool\u00e9en indiquant le succ\u00e8s de la requ\u00eate\n           et le r\u00e9sultat de la requ\u00eate (None si pas de r\u00e9sultat).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.DBManager.ajouter_calibration", "modulename": "FonctionsDB", "qualname": "DBManager.ajouter_calibration", "kind": "function", "doc": "<p>Ajoute une calibration avec les paliers associ\u00e9s.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>date_test</strong>:  Date du test.</li>\n<li><strong>numcapteur</strong>:  Num\u00e9ro du capteur.</li>\n<li><strong>nom_utilisateur</strong>:  Nom de l'utilisateur.</li>\n<li><strong>fichier</strong>:  Nom du fichier source.</li>\n<li><strong>coef_a</strong>:  Coefficient de conversion a.</li>\n<li><strong>coef_b</strong>:  Coefficient de conversion b.</li>\n<li><strong>a_reg</strong>:  Coefficient capteur a.</li>\n<li><strong>b_reg</strong>:  Coefficient capteur b.</li>\n<li><strong>datat1</strong>:  Liste des donn\u00e9es t1 pour les paliers.</li>\n<li><strong>datat2</strong>:  Liste des donn\u00e9es t2 pour les paliers.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Un tuple contenant un bool\u00e9en indiquant le succ\u00e8s de l'ajout\n           et un message de r\u00e9sultat.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">date_test</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">numcapteur</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">nom_utilisateur</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">fichier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">coef_a</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">coef_b</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">a_reg</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">b_reg</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">datat1</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">datat2</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.DBManager.get_calibrations", "modulename": "FonctionsDB", "qualname": "DBManager.get_calibrations", "kind": "function", "doc": "<p>R\u00e9cup\u00e8re les calibrations avec filtres et tri.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filters</strong>:  Un dictionnaire de filtres (optionnel).</li>\n<li><strong>sort_by</strong>:  Le crit\u00e8re de tri (optionnel).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Une liste de calibrations.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">sort_by</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.DBManager.supprimer_calibration", "modulename": "FonctionsDB", "qualname": "DBManager.supprimer_calibration", "kind": "function", "doc": "<p>Supprime une calibration et ses paliers associ\u00e9s.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>calibration_id</strong>:  L'ID de la calibration \u00e0 supprimer.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Un tuple contenant un bool\u00e9en indiquant le succ\u00e8s de la suppression\n           et un message de r\u00e9sultat.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">calibration_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.DBManager.exporter_excel", "modulename": "FonctionsDB", "qualname": "DBManager.exporter_excel", "kind": "function", "doc": "<p>Exporte les donn\u00e9es avec filtres vers Excel.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filtres</strong>:  Dictionnaire des filtres \u00e0 appliquer (optionnel).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Un tuple contenant un bool\u00e9en indiquant le succ\u00e8s de l'export\n           et un message de r\u00e9sultat.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filtres</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.DBManager.get_dernieres_calibrations", "modulename": "FonctionsDB", "qualname": "DBManager.get_dernieres_calibrations", "kind": "function", "doc": "<p>R\u00e9cup\u00e8re la derni\u00e8re calibration pour chaque capteur.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Un tuple contenant un bool\u00e9en indiquant le succ\u00e8s de la requ\u00eate\n           et soit la liste des calibrations, soit un message d'erreur.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.DBManager.exporter_dernieres_calibrations", "modulename": "FonctionsDB", "qualname": "DBManager.exporter_dernieres_calibrations", "kind": "function", "doc": "<p>Exporte les derni\u00e8res calibrations pour chaque capteur dans un fichier Excel.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Un tuple contenant un bool\u00e9en indiquant le succ\u00e8s de l'export\n           et un message de r\u00e9sultat.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.GestionnaireFenetreDB", "modulename": "FonctionsDB", "qualname": "GestionnaireFenetreDB", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "FonctionsDB.GestionnaireFenetreDB.fenetre_db", "modulename": "FonctionsDB", "qualname": "GestionnaireFenetreDB.fenetre_db", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "FonctionsDB.GestionnaireFenetreDB.ouvrir_fenetre_db", "modulename": "FonctionsDB", "qualname": "GestionnaireFenetreDB.ouvrir_fenetre_db", "kind": "function", "doc": "<p>Ouvre la fen\u00eatre de gestion de base de donn\u00e9es si elle n'existe pas d\u00e9j\u00e0.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.creer_onglet_base_de_donnees", "modulename": "FonctionsDB", "qualname": "creer_onglet_base_de_donnees", "kind": "function", "doc": "<p>Cr\u00e9e l'onglet Base de donn\u00e9es avec filtres et tri.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">notebook</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.creer_onglet_deux", "modulename": "FonctionsDB", "qualname": "creer_onglet_deux", "kind": "function", "doc": "<p>Cr\u00e9e le 2e onglet  dans le notebook.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">notebook</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.creer_treeview_calibrations", "modulename": "FonctionsDB", "qualname": "creer_treeview_calibrations", "kind": "function", "doc": "<p>Cr\u00e9e et configure le TreeView des calibrations avec s\u00e9lection multiple.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.creer_treeview_paliers", "modulename": "FonctionsDB", "qualname": "creer_treeview_paliers", "kind": "function", "doc": "<p>Cr\u00e9e et configure le TreeView des paliers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.exporter_donnees_filtrees", "modulename": "FonctionsDB", "qualname": "exporter_donnees_filtrees", "kind": "function", "doc": "<p>Exporte les donn\u00e9es filtr\u00e9es vers Excel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filtres</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.exporter_dernieres_calibrations_db", "modulename": "FonctionsDB", "qualname": "exporter_dernieres_calibrations_db", "kind": "function", "doc": "<p>Appelle directement la m\u00e9thode de DBManager pour exporter les derni\u00e8res calibrations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.Nan", "modulename": "FonctionsDB", "qualname": "Nan", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "FonctionsDB.creer_affichage", "modulename": "FonctionsDB", "qualname": "creer_affichage", "kind": "function", "doc": "<p>Cr\u00e9e l'interface graphique principale et g\u00e8re la taille de la fen\u00eatre.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Tk</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();